AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Deoploy a multi-tier application architecture using nested CloudFormation stacks.
  Create a webserver in the public subnet allowing to configure the webserver and create golden image based on it
Metadata:
  Comment: This is a group project for course INFOSYS 735 group assessment2
  Owner: Group 15

Parameters:
  namePrefix:
    Type: String
    Default: AnyGroup
    Description: Prefix for resource names
  MyIP:
    Type: String
    Description: |
      Your IP address in CIDR notation for SSH access
      Fetch your IP from https://checkip.amazonaws.com/ and append /32 for single IP access
    Default: 0.0.0.0/0
  repositoryUrl:
    Type: String
    #GitURL: https://raw.githubusercontent.com/Steven-lei/INFOSYS735-groupassessment2/main
    #BucketURL: https://anygroup-templates.s3.us-east-1.amazonaws.com
    Default: https://anygroup-templates.s3.us-east-1.amazonaws.com
    Description: S3 bucket URL where the nested stack templates are stored, such as https://s3.amazonaws.com/your-bucket-name

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: vockey

  EC2InstanceProfile:
    Type: String
    Description: IAM Instance Profile Name for the EC2 instances
    Default: LabInstanceProfile
  CreateDB:
    Type: String
    Default: "no"
    AllowedValues: ["yes", "no"]
    Description: |
      Whether to create a RDS database
Conditions:
  NeedDB: !Equals [!Ref CreateDB, "yes"]

Resources:
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${repositoryUrl}/templates/network_template.yaml"
      Parameters:
        namePrefix: !Ref namePrefix
        EnvType: test
  SecurityGroupStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${repositoryUrl}/templates/securitygroup_template.yaml"
      Parameters:
        namePrefix: !Ref namePrefix
        VPCId: !GetAtt NetworkStack.Outputs.VPCId

  WebServerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${repositoryUrl}/templates/webserver_template.yaml"
      Parameters:
        namePrefix: !Ref namePrefix
        SubnetId: !GetAtt NetworkStack.Outputs.PublicSubnetAId
        SecurityGroupIds:
          !Join [
            ",",
            [
              !GetAtt SecurityGroupStack.Outputs.LoadBalancerSecurityGroupId,
              !GetAtt SecurityGroupStack.Outputs.SSHSecurityGroupId,
            ],
          ]
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        LatestAmiId: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
        EC2InstanceProfile: !Ref EC2InstanceProfile
  DBStack:
    Type: AWS::CloudFormation::Stack
    Condition: NeedDB
    Properties:
      TemplateURL: !Sub "${repositoryUrl}/templates/db_template.yaml"
      Parameters:
        namePrefix: !Ref namePrefix
        SubnetIds: !Join [
            ",",
            [
              !GetAtt NetworkStack.Outputs.PublicSubnetAId, #create the DB in public subnet for easy debugging
              !GetAtt NetworkStack.Outputs.PublicSubnetBId, #create the DB in public subnet for easy debugging
            ],
          ]
        SecurityGroupId: !GetAtt SecurityGroupStack.Outputs.DbSecurityGroupId
        EnvType: "test"
