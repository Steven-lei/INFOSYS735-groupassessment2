AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Create NACL rules for subnets
  PublicSubnets: Allowing HTTP/HTTPS from anywhere, Allowing SSH only from local IP
  AppSubnets: Allowing HTTP/HTTPS from PublicSubnets
  DBSubnets: Allowing DB port(Oracle:1521, MySQL:3306) from AppSubnets

Metadata:
  Comment: This is a group project for course INFOSYS 735 group assessment2
  Owner: Group 15
Parameters:
  namePrefix:
    Type: String
    Description: Enter the name prefix for the stack.
    Default: "Anygroup"
  VpcId:
    Description: Enter the VPC id
    Type: String
    AllowedPattern: "vpc-[a-z0-9]*"
    ConstraintDescription: "Must be a valid VPC ID"
  #List of the public subnets
  PublicSubnets:
    Description: Select the public subnets
    Type: CommaDelimitedList
    Default: ""
    ConstraintDescription: "Must be a valid subnet ID"

  #List of the private subnets
  AppSubnets:
    Description: Select the App subnets
    Type: CommaDelimitedList
    Default: ""
    ConstraintDescription: "Must be a valid subnet ID"
  #List of the db subnets
  DBSubnets:
    Description: Select the DB subnets
    Type: CommaDelimitedList
    Default: ""
    ConstraintDescription: "Must be a valid subnet ID,empty for no DB"
Conditions:
  DBSubnetsExist: !Not [!Equals [!Join ["", !Ref DBSubnets], ""]]
  AppSubnetsExist: !Not [!Equals [!Join ["", !Ref AppSubnets], ""]]
  PublicSubnetsExist: !Not [!Equals [!Join ["", !Ref PublicSubnets], ""]]
Resources:
  PublicNACL:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-PublicNACL"
  AppNACL:
    Condition: AppSubnetsExist
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-AppNACL"
  DBNACL:
    Condition: DBSubnetsExist
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-DBNACL"

  ################################################## FOR PUBLIC SUBNETS ########################################
  # Inbound rules
  # Allow HTTP (80)
  PublicNACLInboundHTTP:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow HTTPS (443)
  PublicNACLInboundHTTPS:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow ephemeral ports for response traffic
  PublicNACLInboundEphemeral:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Outbound rules
  # Allow all outbound
  PublicNACLOutboundAllowAll:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicSubnetANaclAssociate:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Select [0, !Ref PublicSubnets]

  PublicSubnetBNaclAssociate:
    Condition: PublicSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Select [1, !Ref PublicSubnets]

  ######################################################## FOR APP SUBNETS ########################################
  # Inbound rules
  # Allow HTTP (80)
  AppNACLInboundHTTP:
    Condition: AppSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  # Allow ephemeral ports for response traffic
  AppNACLInboundEphemeral:
    Condition: AppSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 120
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Outbound rules
  # Allow all outbound
  AppNACLOutboundAllowAll:
    Condition: AppSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  AppSubnetANaclAssociate:
    Condition: AppSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref AppNACL
      SubnetId: !Select [0, !Ref AppSubnets]
  AppSubnetBNaclAssociate:
    Condition: AppSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref AppNACL
      SubnetId: !Select [1, !Ref AppSubnets]

  ####################################################### FOR DB SUBNETS ###############################################
  # Inbound rules
  # Allow ORACLE,MYSQL (1521,3306)
  DBNACLInboundHTTPOracle:
    Condition: DBSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1521
        To: 1521
  # Allow ephemeral ports for response traffic
  DBNACLInboundEphemeral:
    Condition: DBSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 120
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  DBNACLInboundHTTPMySql:
    Condition: DBSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 110
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3306
        To: 3306
  # Allow all outbound
  DBNACLOutboundAllowAll:
    Condition: DBSubnetsExist
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  DBSubnetANaclAssociate:
    Condition: DBSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref DBNACL
      SubnetId: !Select [0, !Ref DBSubnets]

  DBSubnetBNaclAssociate:
    Condition: DBSubnetsExist
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref DBNACL
      SubnetId: !Select [1, !Ref DBSubnets]
