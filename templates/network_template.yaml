---
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  create a VPC with two public subnets, two app subnets and two db subnets, along with necessary route tables and internet gateway, for a multi-tier application architecture.
  support options for creating natgateway
Metadata:
  Comment: "This is a group project for course INFOSYS 735 group assessment2"
  Owner: "Group 15"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - namePrefix
          - EnvType
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - publicSubnetACidr
          - publicSubnetBCidr
          - appSubnetACidr
          - appSubnetBCidr
          - dbSubnetACidr
          - dbSubnetBCidr
Conditions:
  CreateNatA:
    !Or [!Equals [!Ref EnvType, "dev"], !Equals [!Ref EnvType, "prod"]]
  CreateNatB: !Equals [!Ref EnvType, "prod"]
  UseNatAOnly: !And [!Condition CreateNatA, !Not [!Condition CreateNatB]]
Parameters:
  #CIDR blocks for VPC and subnets
  namePrefix:
    Type: String
    Default: AnyGroup
    Description: Prefix for resource names
  EnvType:
    Type: String
    Default: test
    AllowedValues:
      - dev
      - test
      - prod
    Description: |
      Environment type
      - test: no NAT gateway, save cost, private subnets cannot access internet
      - dev: one NAT gateway in the first AZ, private subnets can initially access internet
      - prod: create gateway in each AZ, high availability for private subnets to access internet
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  publicSubnetACidr:
    Type: String
    Default: 10.0.1.0/26
    Description: CIDR block for the public subnet1
  publicSubnetBCidr:
    Type: String
    Default: 10.0.1.64/26
    Description: CIDR block for the public subnet2

  appSubnetACidr:
    Type: String
    Default: 10.0.12.0/22
    Description: CIDR block for the private subnet1
  appSubnetBCidr:
    Type: String
    Default: 10.0.16.0/22
    Description: CIDR block for the private subnet2

  dbSubnetACidr:
    Type: String
    Default: 10.0.20.0/24
    Description: CIDR block for the db subnetA
  dbSubnetBCidr:
    Type: String
    Default: 10.0.21.0/24
    Description: CIDR block for the db subnetB

# Rules: set of rules
# Mappings: set of mappings
# Conditions: set of conditions
# Transform: set of transforms
Resources:
  #VPC definition
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-VPC"
        - Key: Environment
          Value: !Sub "${EnvType}"
  #Internet Gateway definition
  MainIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-IGW"
        - Key: Environment
          Value: !Sub "${EnvType}"
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref MainIGW

  #NAT gateways in two AZs
  NatEIPA:
    Type: AWS::EC2::EIP
    Condition: CreateNatA
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-NatEIP-A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatA
    Properties:
      AllocationId: !GetAtt NatEIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-NatGateway-A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  NatEIPB:
    Type: AWS::EC2::EIP
    Condition: CreateNatB
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-NatEIP-B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatB
    Properties:
      AllocationId: !GetAtt NatEIPB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix}-NatGateway-B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  #Two public subnets in different AZs
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref publicSubnetACidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} PublicSubnet A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref publicSubnetBCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} PublicSubnet B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  #Two App subnets in different AZs
  AppSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref appSubnetACidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} App Subnet A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  AppSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref appSubnetBCidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} App Subnet B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  #two Db subnets in different AZs
  DbSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref dbSubnetACidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} DB Subnet A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  DbSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref dbSubnetBCidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} DB Subnet B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  #Public Route Table definition
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} PublicRouteTable"
        - Key: Environment
          Value: !Sub "${EnvType}"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainIGW

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  #Private Route Table definition
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} PrivateRouteTable A"
        - Key: Environment
          Value: !Sub "${EnvType}"
  PrivateRouteA:
    Type: AWS::EC2::Route
    Condition: CreateNatA
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub "${namePrefix} PrivateRouteTable B"
        - Key: Environment
          Value: !Sub "${EnvType}"
  PrivateRouteBDev:
    Type: AWS::EC2::Route
    Condition: UseNatAOnly
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateRouteBProd:
    Type: AWS::EC2::Route
    Condition: CreateNatB
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  AppSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  AppSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  DbSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  DbSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnetB
      RouteTableId: !Ref PrivateRouteTableB

Outputs:
  #export VPC and subnet IDs for use in other stacks
  VPCId:
    Description: VPC ID
    Value: !Ref MainVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  PublicSubnetAId:
    Description: Public Subnet A ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetAId"
  PublicSubnetBId:
    Description: Public Subnet B ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetBId"
  AppSubnetAId:
    Description: App Subnet A ID
    Value: !Ref AppSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-AppSubnetAId"
  AppSubnetBId:
    Description: App Subnet B ID
    Value: !Ref AppSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-AppSubnetBId"
  DbSubnetAId:
    Description: DB Subnet A ID
    Value: !Ref DbSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-DbSubnetAId"
  DbSubnetBId:
    Description: DB Subnet B ID
    Value: !Ref DbSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-DbSubnetBId"
